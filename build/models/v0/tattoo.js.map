{"version":3,"sources":["../../../src/models/v0/tattoo.js"],"names":["model","TattooSchema","find","tattoo","getTattooAll","album","getTattooByAlbum","name","getTattooByAlbumAndName","payload","findOneAndUpdate","new","modifyTattooByName","id","findOneAndRemove","_id","deleteTattooById","Tattoo","save","createNewTatttoo","tattooAlbums","tattooSizes","mongoose","Schema","type","String","default","size","enum","image","url","created","Date","now"],"mappings":";;;;;;;AAgCA;AACA;;qEACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgB,eAAQA,KAAR,CAAc,QAAd,EAAwBC,YAAxB,EAAsCC,IAAtC,CAA2C,EAA3C,CADhB;;AAAA;AACCC,kBADD;AAAA,6CAGEA,MAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,Y;;;;;;sEAMf,kBAAiCC,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgB,eAAQL,KAAR,CAAc,QAAd,EAAwBC,YAAxB,EAAsCC,IAAtC,CAA2C,EAAC,SAASG,KAAV,EAA3C,CADhB;;AAAA;AACCF,kBADD;AAAA,8CAGEA,MAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeG,gB;;;;;;sEAMf,kBAAwCC,IAAxC,EAA8CF,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgB,eAAQL,KAAR,CAAc,QAAd,EAAwBC,YAAxB,EAAsCC,IAAtC,CAA2C,EAAC,QAAQK,IAAT,EAAe,SAASF,KAAxB,EAA3C,CADhB;;AAAA;AACCF,kBADD;AAAA,8CAGEA,MAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeK,uB;;;;;;sEAMf,kBAAmCD,IAAnC,EAAyCE,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgB,eAAQT,KAAR,CAAc,QAAd,EAAwBC,YAAxB,EAAsCS,gBAAtC,CAAuD,EAACH,MAAMA,IAAP,EAAvD,EAAqEE,OAArE,EAA8E,EAACE,KAAK,IAAN,EAA9E,CADhB;;AAAA;AACCR,kBADD;AAAA,8CAGEA,MAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeS,kB;;;;;;sEAMf,kBAAiCC,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgB,eAAQb,KAAR,CAAc,QAAd,EAAwBC,YAAxB,EAAsCa,gBAAtC,CAAuD,EAACC,KAAKF,EAAN,EAAvD,CADhB;;AAAA;AACCV,kBADD;AAAA,8CAGEA,MAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAea,gB;;;;;;sEAOf,kBAAiCP,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgB,eAAQT,KAAR,CAAc,QAAd,EAAwBC,YAAxB,CADhB;;AAAA;AACCgB,kBADD;AAECd,kBAFD,GAEU,IAAIc,MAAJ,CAAWR,OAAX,CAFV;;;AAILN,mBAAOe,IAAP;;AAJK,8CAMEf,MANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAegB,gB;;;;;AAjEtB;;;;AACA;;;;;;AAEA,IAAMC,eAAe,CAAC,QAAD,EAAW,QAAX,EAAqB,OAArB,CAArB;AACA,IAAMC,cAAc,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAApB;;AAEA;AACA;AACA,IAAMpB,eAAe,IAAIqB,mBAASC,MAAb,CAAoB;AACvChB,QAAM;AACJiB,UAAMC,MADF;AAEJC,aAAS;AAFL,GADiC;AAKvCC,QAAM;AACJH,UAAMC,MADF;AAEJG,UAAMP;AAFF,GALiC;AASvChB,SAAO;AACLmB,UAAMC,MADD;AAELG,UAAMR;AAFD,GATgC;AAavCS,SAAO;AACLC,SAAK;AACHN,YAAMC;AADH;AADA,GAbgC;AAkBvCM,WAAS;AACPP,UAAMQ,IADC;AAEPN,aAASM,KAAKC;AAFP;AAlB8B,CAApB,CAArB","file":"tattoo.js","sourcesContent":["import mongoose from 'mongoose'\nimport {getDB} from '..'\n\nconst tattooAlbums = ['tattoo', 'navrhy', 'flash']\nconst tattooSizes = ['10x10', '15x15', '20x20']\n\n// TATTTO SCHEMA\n// -----------------------------------------------------------------------------\nconst TattooSchema = new mongoose.Schema({\n  name: {\n    type: String,\n    default: 'tattooImg'\n  },\n  size: {\n    type: String,\n    enum: tattooSizes\n  },\n  album: {\n    type: String,\n    enum: tattooAlbums\n  },\n  image: {\n    url: {\n      type: String\n    }\n  },\n  created: {\n    type: Date,\n    default: Date.now\n  }\n})\n\n// METHODS\n// -----------------------------------------------------------------------------\nexport async function getTattooAll () {\n  const tattoo = await getDB().model('Tattoo', TattooSchema).find({})\n\n  return tattoo\n}\n\nexport async function getTattooByAlbum (album) {\n  const tattoo = await getDB().model('Tattoo', TattooSchema).find({\"album\": album})\n  \n  return tattoo\n}\n\nexport async function getTattooByAlbumAndName (name, album) {\n  const tattoo = await getDB().model('Tattoo', TattooSchema).find({\"name\": name, \"album\": album})\n  \n  return tattoo\n}\n\nexport async function modifyTattooByName (name, payload) {\n  const tattoo = await getDB().model('Tattoo', TattooSchema).findOneAndUpdate({name: name}, payload, {new: true})\n  \n  return tattoo\n}\n\nexport async function deleteTattooById (id) {\n  const tattoo = await getDB().model('Tattoo', TattooSchema).findOneAndRemove({_id: id})\n  \n  return tattoo\n}\n\n\nexport async function createNewTatttoo (payload) {\n  const Tattoo = await getDB().model('Tattoo', TattooSchema)\n  const tattoo = new Tattoo(payload)\n\n  tattoo.save()\n\n  return tattoo\n}\n"]}