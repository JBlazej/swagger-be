{"version":3,"sources":["../../src/controllers/user.js"],"names":["req","res","user","status","send","json","error","userAll","id","params","userById","email","body","password","userCheck","length","hash","good","userCreate","userId","hashPasswd","Object","values","value","push","_id","toString","userSignature","JsonWebToken","token","userSignIn"],"mappings":"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","file":"user.js","sourcesContent":["import {getUserAll, getUserById, createNewUser, getUserByEmail} from '../models/v0/user'\nimport {createHash, isValidPassword} from '../services/bcrypt'\nimport {issueJsonWebToken} from '../services/auth'\n\n// USER Controller\n// -----------------------------------------------------------------------------\nexport async function userAll (req, res){\n  try{\n    const user = await getUserAll()\n    res.status(200).send(user)\n  }catch(error){\n    res.status(400).json({error : 'Bad request'})\n  }\n}\n\nexport async function userById (req, res) {\n  try{\n    const id = req.params.id\n    const user = await getUserById(id)\n    res.status(200).send(user)\n  }catch(error){\n    res.status(400).json({error : 'Bad request'})\n  }\n}\n\nexport async function userCreate (req, res){\n  try{\n    const email = req.body.email\n    const password = req.body.password\n    const userCheck = await getUserByEmail(email)\n    \n    if (!password || !email || userCheck.length === 1) {\n      return res.status(400).json({error : 'Email existed or password not provided'})\n    } else {\n      const hash = await createHash(password)\n      const user = await createNewUser(email, hash)\n      res.status(200).json({good : 'User created'})\n    } \n  }catch(error){\n    res.status(400).json({error: 'Bad request'})\n  }\n}\n\nexport async function userSignIn (req, res) {\n  try{\n    const email = req.body.email\n    const password = req.body.password\n    const user = await getUserByEmail(email)\n    const userId = []\n    const hashPasswd = []\n    \n    for (let value of Object.values(user)) {\n      hashPasswd.push(value.password)\n      userId.push(value._id)\n    }\n\n    if (user.length === 0 || !isValidPassword(password, hashPasswd.toString())) {\n      return res.status(401).json({error : 'Unauthorized Access'})\n    } else{\n\n      let userSignature = {\n        'email': email,\n        '_id': userId.toString()\n      }\n\n      const JsonWebToken = await issueJsonWebToken(userSignature)\n     \n      res.status(200).json({\n        email : email,\n        token : JsonWebToken\n      })\n    }\n    \n  }catch(error) {\n    res.status(400).json({error : 'Bad request'})\n  }\n}\n"]}